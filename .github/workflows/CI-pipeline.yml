name: CI pipeline for platform
on:
  # Manual trigger
  workflow_dispatch:
  # Triggers the workflow on push or pull request events but only for the master branch
  pull_request:
    branches: [master]

env:
  ENV_FILE: .env
  SERVICES: context-box scheduler builder terraformer ansibler kube-eleven kuber frontend testing-framework
  TEST_SETS: test-set1 test-set2

jobs:
  #--------------------------------------------------------------------------------------------------
  merge-branch:
    if: github.event.pull_request.draft == false
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Merge with master branch
        uses: devmasx/merge-branch@1.4.0
        with:
          type: now
          from_branch: master
          target_branch: ${{ github.head_ref }}
          github_token: ${{ github.token }}
  #--------------------------------------------------------------------------------------------------
  build-and-push:
    if: github.event.pull_request.draft == false
    runs-on: self-hosted
    needs: merge-branch
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Set short sha output
        run: echo "SHORT_GITHUB_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

      # Create an array with modules that were changed by a recent commit via bash script
      - name: Check the files for a change
        id: array
        run: |
          arr=()
          SERVICES=( ${{ env.SERVICES }} )
          git fetch origin master
          echo "Changed files:"
          git diff  --name-only origin/master..HEAD
          for i in "$(git diff  --name-only origin/master..HEAD)"
          do
            if [[ $i == *"internal/"* ]] || [[ $i == *"proto/"* ]]; then
              arr=(${SERVICES[@]})
              echo "All services needs to be built"
              break ;
            else
              for SERVICE in "${SERVICES[@]}"; do
                if [[ $i == *"services/$SERVICE"* ]]; then
                arr+=($SERVICE)
                echo "Detected change in $SERVICE"
                fi
              done
            fi
          done
          echo ::set-output name=ARRAY_OF_CHANGES::"${arr[@]}"

        # Login to GCP with repository secrets
      - name: Login to GCP
        if: ${{ steps.array.outputs.ARRAY_OF_CHANGES != '' }}
        uses: google-github-actions/setup-gcloud@v0.6.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          service_account_key: ${{ secrets.GCP_DOCKER_REGISTRY_KEY }}

      # Login to Docker Hub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        if: ${{ steps.array.outputs.ARRAY_OF_CHANGES != '' }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN}}

      # Build the new images that were changed by a recent commit - tag image latest as well for testing
      - name: Build new images
        if: ${{ steps.array.outputs.ARRAY_OF_CHANGES != '' }}
        run: |
          arr=(${{ steps.array.outputs.ARRAY_OF_CHANGES }})
          for path in "${arr[@]}"
          do
            echo "-----Building $path-----"
            IMGTAG="${{secrets.DOCKERHUB_USERNAME}}/$path:${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}"
            DOCKER_BUILDKIT=1 docker build --tag $IMGTAG -f ./services/$path/Dockerfile . 
          done

      # Push images to DockerHub - latest tag is overwritten
      - name: Push new images
        if: ${{ steps.array.outputs.ARRAY_OF_CHANGES != '' }}
        run: |
          arr=(${{ steps.array.outputs.ARRAY_OF_CHANGES }})

          for path in "${arr[@]}"
          do
            docker push ${{secrets.DOCKERHUB_USERNAME}}/$path:${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}
          done

    outputs:
      ARRAY_OF_CHANGES: ${{ steps.array.outputs.ARRAY_OF_CHANGES }}
  #--------------------------------------------------------------------------------------------------
  edit-kustomization:
    runs-on: self-hosted
    needs: [build-and-push, merge-branch]
    if: ${{ needs.build-and-push.outputs.ARRAY_OF_CHANGES != '' && github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Set short sha output
        run: echo "SHORT_GITHUB_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

      - name: install kustomize
        uses: imranismail/setup-kustomize@v1.6.1
        with:
          version: 3.6.1

      # Set the new claudie image tags in kustomization.yaml
      - name: Edit claudie kustomization.yaml
        working-directory: ./manifests/claudie
        run: |
          NEW_SERVICES=( ${{ needs.build-and-push.outputs.ARRAY_OF_CHANGES }} )
          for SERVICE in "${NEW_SERVICES[@]}"
          do
            echo "Setting a new tag for a $SERVICE"
            if [ "$SERVICE" != "testing-framework" ]; then
              kustomize edit set image eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/platform/$SERVICE:${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}
            fi
          done

          cat kustomization.yaml

      # Set the new testing-framework image tags in kustomization.yaml
      - name: Edit testing-framework kustomization.yaml
        working-directory: ./manifests/testing-framework
        run: |
          NEW_SERVICES=( ${{ needs.build-and-push.outputs.ARRAY_OF_CHANGES }} )
          for SERVICE in "${NEW_SERVICES[@]}"
          do
            echo "Setting a new tag for a $SERVICE"
            if [ "$SERVICE" == "testing-framework" ]; then
              kustomize edit set image eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/platform/$SERVICE:${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}
            fi
          done

          cat kustomization.yaml

      # Auto commit the changes
      - name: Commit new kustomization.yaml to feature branch
        working-directory: ./manifests
        run: |
          BRANCH_NAME=${{ github.head_ref }}
          git config --global user.name 'CI/CD pipeline'
          git config --global user.email 'CI/CD-pipeline@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add claudie/kustomization.yaml
          git add testing-framework/kustomization.yaml
          git commit -m "Auto commit - update kustomization.yaml"
          git push

  #--------------------------------------------------------------------------------------------------
  deploy-and-monitor:
    runs-on: self-hosted
    needs: [build-and-push, edit-kustomization]
    if: ${{ needs.build-and-push.outputs.ARRAY_OF_CHANGES && github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Set short sha output
        run: echo "SHORT_GITHUB_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

      - name: install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: latest

      - name: install kustomize
        uses: imranismail/setup-kustomize@v1.6.1
        with:
          version: 3.6.1

      - name: Login to GCP
        uses: google-github-actions/setup-gcloud@v0.6.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          service_account_key: ${{ secrets.GCP_DOCKER_REGISTRY_KEY }}
          export_default_credentials: true
          cleanup_credentials: true

      - name: Configure kubectl
        uses: google-github-actions/get-gke-credentials@v0.3.0
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SERVICE_ACC_KEY }}
          use_auth_provider: true

      # Deploy services to new namespace
      - name: Deploy to new namespace
        working-directory: ./manifests/claudie
        run: |
          kustomize edit set namespace claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}
          kustomize build | kubectl apply -f -

          cat kustomization.yaml

      # Check if everything is ready and running
      - name: Monitor status of the new namespace
        run: |
          arr=( ${{ env.SERVICES }} )
          unset arr[-1]
          echo "${arr[@]}"
          for SERVICE in "${arr[@]}"
          do
          kubectl wait deployment -l app=$SERVICE --for=condition=available --timeout=900s --namespace=claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}
          done

          kubectl get pods --namespace=claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}

      # Insert cloud credentials to test set if needed at CI runtime
      - name: Insert cloud credentials to test set
        working-directory: ./manifests/testing-framework/test-sets
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.27.2/yq_linux_amd64.tar.gz -O - |\
          tar xz && mv yq_linux_amd64 yq

          DIR=( ${{ env.TEST_SETS }} )
          for directory in "${DIR[@]}"
          do
            for file in $directory/*
            do
            #replace hetzner cred
            ./yq e '.providers.hetzner.[0].credentials = "${{ secrets.HETZNER_CREDENTIALS}}"' $file -i
            #replace gcp cred & project
            ./yq e '.providers.gcp.[0].credentials = ${{ secrets.GCP_CREDENTIALS }}' $file -i
            ./yq e '.providers.gcp.[0].gcp_project = "${{ secrets.GCP_DEV_PROJECT_ID }}"' $file -i
            done
          done

      - name: Insert random test hostnames to loadbalancer test set
        working-directory: ./manifests/testing-framework/test-sets
        run: |
          HOSTNAME=$(echo $RANDOM | md5sum | head -c 20; echo;)  ./yq e '.loadBalancers.clusters.[1].dns.hostname = strenv(HOSTNAME)' test-set2/1.yaml -i
          HOSTNAME=$(echo $RANDOM | md5sum | head -c 20; echo;)  ./yq e '.loadBalancers.clusters.[0].dns.hostname = strenv(HOSTNAME)' test-set2/4.yaml -i

          #Clean up
          rm -f yq 
          rm -f yq.1 
          rm -f install-man-page.sh 

      - name: Start the E2E tests
        working-directory: ./manifests
        run: |
          kustomize edit set namespace claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}
          kustomize build . | kubectl apply -f -

      - name: Monitor E2E test
        run: |
          kubectl wait --for=condition=complete --timeout=10800s job/testing-framework -n claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}

      - name: Dump logs from testing framework
        if: ${{ always() }}
        run: |
          gcloud logging read "resource.labels.container_name = "testing-framework" AND severity >= ERROR AND  resource.labels.namespace_name = "claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}""

      - name: Wait until frontend will clean up the infra from tests
        run: |
          # wait max 5min until the frontend will pick up the change + 10min until everything is destroyed
          sleep 15m

      - name: Delete temporary namespace
        run: |
          kubectl delete namespace claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}
