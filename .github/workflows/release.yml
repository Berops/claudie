name: Release pipeline
on:
  # Run when release is published
  release:
    types: [published]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  SERVICES: context-box scheduler builder terraformer ansibler kube-eleven kuber frontend

jobs:
  build-and-publish:
    name: Create a new release
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Set release tag
        run: |
          R=${GITHUB_REF#"refs/tags/"}
          echo "RELEASE=$R" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Create and use docker context
        run: |
          docker context create claudie
          docker context use claudie

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: claudie

      - name: Install kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: 3.6.1

      - name: Set up docker
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Update autoscaler-adapter manifest in this steps as new kuber would need to contain manifest with the correct image tag
      - name: Edit autoscaler-adapter image tag in the manifest
        working-directory: ./services/kuber/templates
        run: |
          TAG=${RELEASE}
          sed "s/image: ghcr.io\/berops\/claudie\/autoscaler-adapter/&:$TAG/" autoscaler-adapter.goyaml

      - name: Build and push new images
        run: |
          ARR=( ${{ env.SERVICES }} )
          for SERVICE in "${ARR[@]}"
          do
            echo "-----Building $SERVICE-----"
            IMGTAG="ghcr.io/berops/claudie/$SERVICE:${RELEASE}" 
            DOCKER_BUILDKIT=1 docker buildx build --push --platform linux/amd64,linux/arm64 --tag $IMGTAG -f ./services/$SERVICE/Dockerfile . 
          done

      - name: Set new image & tag to manifests
        working-directory: manifests/claudie
        run: |
          ARR=( ${{ env.SERVICES }} )
          for SERVICE in "${ARR[@]}"
          do
            kustomize edit set image ghcr.io/berops/claudie/$SERVICE:${RELEASE}
          done

      - name: Create archives for manifests
        working-directory: manifests/claudie
        run: |
          sudo apt update && sudo apt install -y zip tar
          tar -czvf ../../claudie.tar.gz .
          zip -r ../../claudie.zip .

      - name: Get checksums of the archives
        run: |
          touch claudie_checksums.txt
          sha256sum claudie.tar.gz >> claudie_checksums.txt
          sha256sum claudie.zip >> claudie_checksums.txt

      - name: Add manifests to the release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          file: claudie.*
          file_glob: true

      - name: Add checksums file to the release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          file: claudie_checksums.txt

      - name: Set up git author
        run: |
          remote_repo="https://${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git remote rm origin
          git remote add origin "${remote_repo}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # NOTE: the pipeline will fail, if gh-pages branch isn't created!!!
      - name: Git fetch gh-pages
        run: git fetch origin gh-pages

      # this is only possible, when there is already a version with latest alias
      # in case there isn't a version like this you have to
      #   1. mike deploy <version> latest
      #   2. mike set-default latest
      #   3. mike deploy <version_from_cmd_1> latest --push
      # --push flag in the latest cmd is necessary, when you want to apply changes in gh-pages branch and also in GH Pages
      - name: Deploy new docs version
        run: mike deploy ${RELEASE} latest --update-aliases --push