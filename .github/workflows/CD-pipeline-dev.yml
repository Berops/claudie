name: CD pipeline for Claudie - dev
on:
  # Run after merge to master
  push:
    branches:
      - master
  # Manual trigger
  workflow_dispatch:

env:
  ENV_FILE: .env
  SERVICES: context-box scheduler builder terraformer ansibler kube-eleven kuber frontend testing-framework
  TEST_SETS: test-set1 test-set2

jobs:
  deploy-and-monitor:
    if: github.event.pull_request.draft == false
    permissions:
      id-token: write
      contents: read
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Set short sha output
        run: echo "SHORT_GITHUB_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

      - name: install kubectl
        uses: azure/setup-kubectl@v3.0
        with:
          version: latest

      - name: install kustomize
        uses: imranismail/setup-kustomize@v1.6.1
        with:
          version: 3.6.1

      - name: Login to GCP
        uses: google-github-actions/auth@v0.4.0
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          access_token_lifetime: '21600s'

      - name: Configure kubectl
        uses: google-github-actions/get-gke-credentials@v0.4.0
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SERVICE_ACC_KEY }}
          use_auth_provider: true

      # Deploy services to new namespace
      - name: Deploy to new namespace
        working-directory: ./manifests/claudie
        run: |
          kustomize edit set namespace claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}
          kustomize build | kubectl apply -f - 

          cat kustomization.yaml

      # Check if everything is ready and running
      - name: Monitor status of the new namespace
        run: |
          arr=( ${{ env.SERVICES }} )
          unset arr[-1]
          echo "${arr[@]}"
          for SERVICE in "${arr[@]}"
          do 
          kubectl wait deployment -l app=$SERVICE --for=condition=available --timeout=900s --namespace=claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}
          done

          kubectl get pods --namespace=claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}

        # Insert cloud credentials to test set if needed at CI runtime
      - name: Insert cloud credentials to test set
        working-directory: ./manifests/testing-framework/test-sets
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.27.2/yq_linux_amd64.tar.gz -O - |\
          tar xz && mv yq_linux_amd64 yq

          DIR=( ${{ env.TEST_SETS }} )
          for directory in "${DIR[@]}"
          do
            for file in $directory/*
            do
            #replace hetzner cred
            ./yq e '.providers.hetzner.[0].credentials = "${{ secrets.HETZNER_CREDENTIALS}}"' $file -i
            #replace gcp cred & project
            ./yq e '.providers.gcp.[0].credentials = ${{ secrets.GCP_CREDENTIALS }}' $file -i
            ./yq e '.providers.gcp.[0].gcp_project = "${{ secrets.GCP_DEV_PROJECT_ID }}"' $file -i
            done
          done

      - name: Insert random test hostnames to loadbalancer test set
        working-directory: ./manifests/testing-framework/test-sets
        run: |
          HOSTNAME=$(echo $RANDOM | md5sum | head -c 20; echo;)  ./yq e '.loadBalancers.clusters.[1].dns.hostname = strenv(HOSTNAME)' test-set2/1.yaml -i
          HOSTNAME=$(echo $RANDOM | md5sum | head -c 20; echo;)  ./yq e '.loadBalancers.clusters.[0].dns.hostname = strenv(HOSTNAME)' test-set2/4.yaml -i

          #Clean up
          rm -f yq 
          rm -f yq.1 
          rm -f install-man-page.sh 

      - name: Start the E2E tests
        working-directory: ./manifests
        run: |
          kustomize edit set namespace claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}
          kustomize build . | kubectl apply -f -

      - name: Monitor E2E test
        run: |
          kubectl wait --for=condition=complete --timeout=10800s job/testing-framework -n claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}

      - name: Dump logs from testing framework
        if: ${{ always() }}
        run: |
          gcloud logging read "resource.labels.container_name = "testing-framework" AND severity >= ERROR AND  resource.labels.namespace_name = "claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}""

      - name: Wait until frontend will clean up the infra from tests
        run: |
          # wait max 5min until the frontend will pick up the change + 10min until everything is destroyed
          sleep 15m

      - name: Delete temporary namespace
        run: |
          kubectl delete namespace claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}
