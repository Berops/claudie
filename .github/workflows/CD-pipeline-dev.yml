name: CD pipeline for Claudie - dev
on:
  # Run after merge to master
  push:
    branches:
      - master
  # Manual trigger
  workflow_dispatch:

env:
  ENV_FILE: .env
  SERVICES: context-box scheduler builder terraformer ansibler kube-eleven kuber frontend testing-framework
  TEST_SETS: test-set1 test-set2 test-set3

jobs:
  check-changes:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 2

      - name: Check the PR for a changes since last commit
        id: change
        run: |
          SERVICES=( ${{ env.SERVICES }} )
          git fetch origin master
          echo "Files changed since last commit"
          git diff  --name-only HEAD^ HEAD
          for i in "$(git diff  --name-only HEAD^ HEAD)"
          do
            if [[ $i == *"internal/"* ]] || [[ $i == *"proto/"* ]] || [[ $i == "go.mod" ]] || [[ $i == "go.sum" ]] && [[ $i != *".md"* ]]; then
              echo "RUN_TESTS=true" >> $GITHUB_OUTPUT
              break
            elif [[ $i == *"manifests/"* ]] && [[ $i != *".md"* ]]; then
              echo "RUN_TESTS=true" >> $GITHUB_OUTPUT
              break
            else
              for SERVICE in "${SERVICES[@]}"; do
                if [[ $i == *"services/$SERVICE"* ]] && [[ $i != *".md"* ]]; then
                echo "RUN_TESTS=true" >> $GITHUB_OUTPUT
                break
                fi
              done
            fi
          done
    outputs:
      RUN_TESTS: ${{ steps.change.outputs.RUN_TESTS }}
  #--------------------------------------------------------------------------------------------------
  deploy-and-monitor:
    if: ${{ needs.build-and-push.outputs.RUN_TESTS == 'true' }}
    needs: check-changes
    permissions:
      id-token: write
      contents: read
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Set short sha output
        run: echo "SHORT_GITHUB_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

      - name: install kubectl
        uses: azure/setup-kubectl@v3.0
        with:
          version: latest

      - name: install kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          version: 3.6.1

      - name: Login to GCP
        uses: google-github-actions/auth@v0.8.3
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          access_token_lifetime: "21600s"

      - name: Configure kubectl
        uses: google-github-actions/get-gke-credentials@v0.8.2
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_ZONE }}
          use_auth_provider: true

      # Deploy services to new namespace
      - name: Deploy to new namespace
        working-directory: ./manifests/claudie
        run: |
          kustomize edit set namespace claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}
          kustomize build | kubectl apply -f - 

          cat kustomization.yaml

      # Check if everything is ready and running
      - name: Monitor status of the new namespace
        run: |
          arr=( ${{ env.SERVICES }} )
          unset arr[-1]
          echo "${arr[@]}"
          for SERVICE in "${arr[@]}"
          do 
          kubectl wait deployment -l app=$SERVICE --for=condition=available --timeout=900s --namespace=claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}
          done

          kubectl get pods --namespace=claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}

        # Insert cloud credentials to test set if needed at CI runtime
      - name: Insert cloud credentials to test set
        working-directory: ./manifests/testing-framework/test-sets
        run: |
          wget -q https://github.com/mikefarah/yq/releases/download/v4.27.2/yq_linux_amd64.tar.gz -O - |\
          tar xz && mv yq_linux_amd64 yq

          DIR=( ${{ env.TEST_SETS }} )
          for directory in "${DIR[@]}"
          do
            for file in $directory/*
            do
            #replace hetzner cred
            ./yq e '.providers.hetzner.[].credentials = "${{ secrets.HETZNER_CREDENTIALS}}"' $file -i
            #replace gcp cred & project
            ./yq e '.providers.gcp.[].credentials = ${{ secrets.GCP_CREDENTIALS }}' $file -i
            ./yq e '.providers.gcp.[].gcp_project = "${{ secrets.GCP_DEV_PROJECT_ID }}"' $file -i
            #replace oci cred
            ./yq e '.providers.oci.[].private_key = "${{ secrets.OCI_PRIVATE_KEY }}"' $file -i
            ./yq e '.providers.oci.[].key_fingerprint = "${{ secrets.OCI_FINGERPRINT }}"' $file -i
            ./yq e '.providers.oci.[].tenancy_ocid = "${{ secrets.OCI_TENANCY }}"' $file -i
            ./yq e '.providers.oci.[].user_ocid = "${{ secrets.OCI_USER }}"' $file -i
            ./yq e '.providers.oci.[].compartment_ocid = "${{ secrets.OCI_COMPARTMENT }}"' $file -i
            #replace aws cred
            ./yq e '.providers.aws.[].access_key = "${{ secrets.AWS_ACCESS_KEY }}"' $file -i
            ./yq e '.providers.aws.[].secret_key = "${{ secrets.AWS_SECRET_KEY }}"' $file -i
            #replace azure cred
            ./yq e '.providers.azure.[].subscription_id = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"' $file -i
            ./yq e '.providers.azure.[].tenant_id = "${{ secrets.AZURE_TENANT_ID }}"' $file -i
            ./yq e '.providers.azure.[].client_id = "${{ secrets.AZURE_CLIENT_ID }}"' $file -i
            ./yq e '.providers.azure.[].client_secret = "${{ secrets.AZURE_CLIENT_SECRET }}"' $file -i
            ./yq e '.providers.azure.[].resource_group = "${{ secrets.AZURE_RESOURCE_GROUP }}"' $file -i
            done
          done

      - name: Insert random test hostnames to loadbalancer test set
        working-directory: ./manifests/testing-framework/test-sets
        run: |
          HOSTNAME=$(echo $RANDOM | md5sum | head -c 20; echo;)  ./yq e '.loadBalancers.clusters.[1].dns.hostname = strenv(HOSTNAME)' test-set2/1.yaml -i
          HOSTNAME=$(echo $RANDOM | md5sum | head -c 20; echo;)  ./yq e '.loadBalancers.clusters.[0].dns.hostname = strenv(HOSTNAME)' test-set2/4.yaml -i

          #Clean up
          rm -f yq 
          rm -f yq.1 
          rm -f install-man-page.sh

      - name: Start the E2E tests
        working-directory: ./manifests
        run: |
          kustomize edit set namespace claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}
          kustomize build . | kubectl apply -f -

      - name: Monitor E2E test
        run: |
          kubectl wait --for=condition=complete --timeout=10800s job/testing-framework -n claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}

      - name: Wait until frontend will clean up the infra from tests
        run: |
          # wait max 5min until the frontend will pick up the change + 10min until everything is destroyed
          sleep 15m

      - name: Delete temporary namespace
        run: |
          kubectl delete namespace claudie-${SHORT_GITHUB_SHA}-${GITHUB_RUN_NUMBER}
