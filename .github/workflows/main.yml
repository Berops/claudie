name: CI pipeline for creating and pushing the docker images
# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, feature/GithubActions ] 
  pull_request:
    branches: [ master ]

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
      # Path to env file
    env:
      ENV_FILE: .env

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Login to GCP with repository secrets 
      - name: Login to GCP
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          service_account_key: ${{ secrets.GCP_DOCKER_REGISTRY_KEY }}
      # Configure docker for use on the GCP
      - name: Configure Docker
        run: gcloud auth configure-docker --quiet
      # Checks-out repository under $GITHUB_RUN_NUMBERWORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      # Import .env file - read it through bash script
      - name: Import environment variables from a file
        id: import-env
        shell: bash
        run: |
          while read line; do
            echo "$line" >> $GITHUB_ENV
          done < ${{ env.ENV_FILE }}
      # Create an array with modules that were changed by a recent commit via bash script
      - name: Check the files for a change
        id: array
        run: |
          arr=()
          git fetch origin master
          echo "Changed files:"
          git diff  --name-only origin/master..HEAD
          for i in "$(git diff  --name-only origin/master..HEAD)"
          do
            if [[ $i == *"context-box"* ]]; then
              arr+=("context-box")
              echo "Adding context-box"
            fi
            if [[ $i == *"scheduler"* ]]; then
              arr+=("scheduler")
              echo "Adding scheduler"
            fi
            if [[ $i == *"terraformer"* ]]; then
              arr+=("terraformer")
              echo "Adding terraformer"
            fi
            if [[ $i == *"builder"* ]]; then
              arr+=("builder")
              echo "Adding builder"
            fi
            if [[ $i == *"wireguardian"* ]]; then
              arr+=("wireguardian")
              echo "Adding wireguardian"
            fi
            if [[ $i == *"kubeEleven"* ]]; then
              arr+=("kubeEleven")
              echo "Adding kubeEleven"
            fi
          done
          echo ::set-output name=ARRAY::"${arr[@]}"
      # Build the new images that were changed by a recent commit - tag image latest as well for testing
      - name: Build new images
        run: |
          arr=({{ steps.array.outputs.ARRAY }})
          if [ ${#arr[@]} -eq 0 ] 
          then
            echo "No changes were detected, nothing to build"            
          else
            for path in "${arr[@]}"
            do
            echo "$path"
            docker build --tag eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/platform/$path:$GITHUB_RUN_NUMBER -f ./services/$path/Dockerfile .
            #docker tag eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/platform/$path:$GITHUB_RUN_NUMBER eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/platform/$path:latest
            done
          fi
      # Create network for docker containers, so they can connect to each other
      - name: Create network for Docker containers
        run: docker network create --driver bridge platform-net

      # Run the docker images - using latest for testing
#      - name: Run MongoDB
#        run: docker run --rm -it -v mongodb:/data/db --name mongodb -d -p $DATABASE_PORT:$DATABASE_PORT --network platform-net mongo
#      - name: Run Context-box
#        run: docker run --env-file .env --name context-box -d -p $CONTEXT_BOX_PORT:$CONTEXT_BOX_PORT --network platform-net eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/platform/context-box:latest
#      - name: Run Scheduler
#        run: docker run --env-file .env --name scheduler -d --network platform-net eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/platform/scheduler:latest
#     - name: Run KubeEleven
#      run: docker run --env-file .env --name kube_eleven -d -p $KUBE_ELEVEN_PORT:$KUBE_ELEVEN_PORT --network platform-net eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/platform/kube_eleven:latest
#     - name: Run Builder
#      run: docker run --env-file .env --name builder -d -p $BUILDER_PORT:$BUILDER_PORT --network platform-net eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/platform/builder:latest
#     - name: Run Wireguardian
#      run: docker run --env-file .env --name wireguardian -d -p $WIREGUARDIAN_PORT:$WIREGUARDIAN_PORT --network platform-net eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/platform/wireguardian:latest
#     - name: Terraformer
#      run: docker run --env-file .env --name terraformer -d -p $TERRAFORMER_PORT:$TERRAFORMER_PORT --network platform-net eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/platform/terraformer:latest
      # Add 10s delay so services can connect and start working as intended
      - name: Add a small delay to give services time to initialize
        run: sleep 10
      # Check the containers and their status
      - name: Check the containers
        run: docker ps -a
      # Push images to GCR - latest tag is overwritten
#      - name: Push new images 
#        run: |
#          arr=({{ steps.array.outputs.ARRAY }})
#          if [ ${#arr[@]} -eq 0 ] 
#          then
#            echo "No images were build, nothing to push"
#          else
#            for path in "${{ steps.array.outputs.ARRAY }}"
#            do
#            docker push eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/platform/$path:$GITHUB_RUN_NUMBER
#            docker push eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/platform/$path:latest
#            done
#          fi