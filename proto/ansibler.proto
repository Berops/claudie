syntax = "proto3";
package claudie;
option go_package = "proto/pb";

import "spec/manifest.proto";

message InstallRequest {
  spec.K8scluster desired = 1;
  repeated spec.LBcluster desiredLbs = 2;
  string projectName = 3;
}
message InstallResponse {
  spec.K8scluster desired = 1;
  repeated spec.LBcluster desiredLbs = 2;
}

message SetUpLBRequest {
  spec.K8scluster desired = 1;
  repeated spec.LBcluster currentLbs = 2;
  repeated spec.LBcluster desiredLbs = 3;
  string previousAPIEndpoint = 4;
  string projectName = 5;
  bool firstRun = 6;
}
message SetUpLBResponse {
  spec.K8scluster desired = 1;
  repeated spec.LBcluster currentLbs = 2;
  repeated spec.LBcluster desiredLbs = 3;
}

message TeardownLBRequest {
  spec.K8scluster desired = 1;
  repeated spec.LBcluster desiredLbs = 2;
  // LB clusters which were deleted from the Claudie manifest.
  repeated spec.LBcluster deletedLbs = 3;
  string projectName = 4;
}

message TeardownLBResponse {
  string previousAPIEndpoint = 1;
  spec.K8scluster desired = 2;
  repeated spec.LBcluster desiredLbs = 3;
  repeated spec.LBcluster deletedLbs = 4;
}

message UpdateAPIEndpointRequest{
  spec.K8scluster current = 1;
  spec.K8scluster desired = 2;
  string projectName = 3;
}

message UpdateAPIEndpointResponse{
  spec.K8scluster current = 1;
  spec.K8scluster desired = 2;
}

message UpdateNoProxyEnvsRequest{
  K8scluster current = 1;
  K8scluster desired = 2;
  string projectName = 3;
}

message UpdateNoProxyEnvsResponse{
  K8scluster current = 1;
  K8scluster desired = 2;
}

message RemoveClaudieUtilitiesRequest {
  spec.K8scluster current = 1;
  repeated spec.LBcluster currentLbs = 2;
  string projectName = 3;
}

message RemoveClaudieUtilitiesResponse {
  spec.K8scluster current = 1;
  repeated spec.LBcluster currentLbs = 2;
}

service AnsiblerService {
  // InstallNodeRequirements installs any requirements there are on all of the nodes.
  rpc InstallNodeRequirements(InstallRequest) returns (InstallResponse);
  // InstallVPN sets up a VPN between the nodes in the k8s cluster and LB clusters.
  rpc InstallVPN(InstallRequest) returns (InstallResponse);
  // SetUpLoadbalancers sets up the load balancers together with the DNS and verifies their configuration.
  rpc SetUpLoadbalancers(SetUpLBRequest) returns (SetUpLBResponse);
  // TeardownLoadBalancers correctly destroys the load balancers attached to a k8s
  // cluster by choosing a new ApiServer endpoint.
  rpc TeardownLoadBalancers(TeardownLBRequest) returns (TeardownLBResponse);
  // UpdateAPIEndpoint handles changes of API endpoint between control nodes.
  // It will update the current stage based on the information from the desired state.
  rpc UpdateAPIEndpoint(UpdateAPIEndpointRequest) returns (UpdateAPIEndpointResponse);
  // Removes utilities installed by claudie via ansible playbooks.
  // UpdateNoProxyEnvs handles changes of NO_PROXY and no_proxy env variables in kube-proxy DaemonSet and static pods.
  // It will check the public and private IPs in the current and desired state. If there's a mismatch it will update the envs accordingly.
  rpc UpdateNoProxyEnvs(UpdateNoProxyEnvsRequest) returns (UpdateNoProxyEnvsResponse);
  rpc RemoveClaudieUtilities(RemoveClaudieUtilitiesRequest) returns (RemoveClaudieUtilitiesResponse);
}
