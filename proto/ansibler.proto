syntax = "proto3";
package claudie;
option go_package = "proto/pb";

import "spec/manifest.proto";

message InstallRequest {
  spec.K8scluster desired = 1;
  repeated spec.LBcluster desiredLbs = 2;
  string projectName = 3;
}
message InstallResponse {
  spec.K8scluster desired = 1;
  repeated spec.LBcluster desiredLbs = 2;
}

message SetUpLBRequest {
  spec.K8scluster desired = 1;
  repeated spec.LBcluster currentLbs = 2;
  repeated spec.LBcluster desiredLbs = 3;
  string projectName = 6;
}

message SetUpLBResponse {
  spec.K8scluster desired = 1;
  repeated spec.LBcluster desiredLbs = 2;
}

message DetermineApiEndpointChangeRequest {
  spec.K8scluster current = 1;
  repeated spec.LBcluster currentLbs = 2;

  string projectName = 5;

  spec.ApiEndpointChangeState state = 6;
  string currentEndpointId = 7;
  string desiredEndpointId = 8;
}

message DetermineApiEndpointChangeResponse {
  spec.K8scluster current = 1;
  repeated spec.LBcluster currentLbs = 2;
}

message UpdateAPIEndpointRequest{
  message Endpoint {
    string nodepool = 1;
    string node = 2;
  }
  spec.K8scluster current = 1;
  Endpoint endpoint = 2;
  string projectName = 4;
}

message UpdateAPIEndpointResponse{
  spec.K8scluster current = 1;
}

message UpdateProxyEnvsOnNodesRequest{
  spec.K8scluster desired = 1;
  spec.ProxyEnvs proxyEnvs = 2;
  string projectName = 3;
}

message UpdateProxyEnvsOnNodesResponse{}

message UpdateProxyEnvsK8sServicesRequest{
  spec.K8scluster current = 1;
  spec.K8scluster desired = 2;
  spec.ProxyEnvs proxyEnvs = 3;
  string projectName = 4;
}

message UpdateProxyEnvsK8sServicesResponse{}

message RemoveClaudieUtilitiesRequest {
  spec.K8scluster current = 1;
  repeated spec.LBcluster currentLbs = 2;
  string projectName = 3;
}

message RemoveClaudieUtilitiesResponse {}

service AnsiblerService {
  // InstallNodeRequirements installs any requirements there are on all of the nodes.
  rpc InstallNodeRequirements(InstallRequest) returns (InstallResponse);
  // InstallVPN sets up a VPN between the nodes in the k8s cluster and LB clusters.
  rpc InstallVPN(InstallRequest) returns (InstallResponse);
  // SetUpLoadbalancers sets up the load balancers together with the DNS and verifies their configuration.
  rpc SetUpLoadbalancers(SetUpLBRequest) returns (SetUpLBResponse);
  // DetermineApiEndpointChange determines if due to the changes of the loadbalancer infrastructure the api endpoint
  // needs to be moved.
  rpc DetermineApiEndpointChange(DetermineApiEndpointChangeRequest) returns (DetermineApiEndpointChangeResponse);
  // UpdateAPIEndpoint handles changes of API endpoint between control nodes.
  // It will update the current stage based on the information from the desired state.
  rpc UpdateAPIEndpoint(UpdateAPIEndpointRequest) returns (UpdateAPIEndpointResponse);
  // UpdateProxyEnvsOnNodes handles changes of HTTP_PROXY, HTTPS_PROXY, NO_PROXY, http_proxy, https_proxy and no_proxy envs in /etc/environment
  rpc UpdateProxyEnvsOnNodes(UpdateProxyEnvsOnNodesRequest) returns (UpdateProxyEnvsOnNodesResponse);
  // UpdateProxyEnvsK8sServices propagates the changes to the HTTP proxy to relevant kubernetes services.
  rpc UpdateProxyEnvsK8sServices(UpdateProxyEnvsK8sServicesRequest) returns (UpdateProxyEnvsK8sServicesResponse);
  // Removes utilities installed by claudie via ansible playbooks.
  rpc RemoveClaudieUtilities(RemoveClaudieUtilitiesRequest) returns (RemoveClaudieUtilitiesResponse);
}
