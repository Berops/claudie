syntax = "proto3";
package spec;
option go_package = "github.com/berops/claudie/proto/pb/spec";

import "spec/nodepool.proto";
import "spec/dns.proto";

// Config holds data for a single manifest.
message Config {
  // Config ID in the DB.
  string id = 1;
  // Config name - same as input manifest name.
  string name = 2;
  // resourceName represents the input manifest resource name in Kubernetes
  string resourceName = 3;
  // resourceNamespace represents the input manifest resource namespace in Kubernetes
  string resourceNamespace = 4;
  // Client defined manifest.
  string manifest = 5;
  // Desired state based on the input manifest manifest.
  Project desiredState = 6;
  // Current state of the infrastructure.
  Project currentState = 7;
  // Manifest state checksum.
  bytes msChecksum = 8;
  // Desired state checksum.
  bytes dsChecksum = 9;
  // Current state checksum.
  bytes csChecksum = 10;
  // Builder time to live counter.
  int32 builderTTL = 11;
  // Scheduler time to live counter.
  int32 schedulerTTL = 12;
  // Per-cluster workflow state.
  map<string, Workflow> state = 13;
}

message Workflow {
  enum Stage {
    // NONE indicates that no stage is currently executing.
    NONE = 0;
    // TERRAFORMER indicates that the cluster is currently being build in
    // terraformer.
    TERRAFORMER = 1;
    // ANSIBLER indicates that the cluster is currently being build in ansibler.
    ANSIBLER = 2;
    // KUBE_ELEVEN indicates that the cluster is currently being build in kube
    // eleven.
    KUBE_ELEVEN = 3;
    // KUBER indicates that the cluster is currently being build in kuber.
    KUBER = 4;
    // SCHEDULER indicates that the config is being processed by the scheduler.
    SCHEDULER = 5;
    // DESTROY_TERRAFORMER indicates that infra for a cluster is being deleted.
    DESTROY_TERRAFORMER = 7;
    // DESTROY_KUBER indicates that data for a cluster is being deleted.
    DESTROY_KUBER = 8;
    // DELETE_NODES indicates the nodes are being deleted for the cluster.
    DELETE_NODES = 9;
  }

  enum Status {
    // DONE indicates that the workflow has finished.
    DONE = 0;
    // ERROR indicates that an error occurred while building the cluster.
    ERROR = 1;
    // IN_PROGRESS indicates that the cluster is currently being build.
    IN_PROGRESS = 2;
  }

  Stage stage = 1;
  Status status = 2;
  // additional information describing the state and status.
  string description = 3;
}

// Project represents the desired and current state of the manifest.
message Project {
  // Name of the project - same as input manifest name.
  string name = 1;
  // Array of Kubernetes clusters.
  repeated K8scluster clusters = 2;
  //  Array of Load Balancer clusters.
  repeated LBcluster loadBalancerClusters = 3;
}

// K8scluster represents a single kubernetes cluster specified in the manifest.
message K8scluster {
  // General info about the cluster.
  ClusterInfo clusterInfo = 1;
  // Network range for the VPN.
  string network = 2;
  // Kubeconfig of the cluster.
  string kubeconfig = 3;
  // Kubernetes version.
  string kubernetes = 4;
}

// LBcluster represents a single load balancer cluster specified in the
// manifest.
message LBcluster {
  // General info about the cluster.
  ClusterInfo clusterInfo = 1;
  // Array of Load balancer roles.
  repeated Role roles = 2;
  // DNS information.
  DNS dns = 3;
  // Kubernetes cluster name of the cluster this load balancer is attached to.
  string targetedK8s = 4;
}

// ClusterInfo holds general information about the clusters.
message ClusterInfo {
  // Name of the cluster.
  string name = 1;
  // Random hash of the cluster.
  string hash = 2;
  // Array of node pools this cluster is made of.
  repeated NodePool nodePools = 5;
}

// Role represents a single loadbalancer role from the manifest.
message Role {
  // Name of the role.
  string name = 1;
  // Protocol that load balancer uses to forward traffic. ["tcp", "udp"]
  string protocol = 2;
  // Port that load balancer will forward from.
  int32 port = 3;
  // Port that load balancer will forward to.
  int32 targetPort = 4;
  // TODO: remove in favor of targetPools.
  // Targeted nodes in Kubernetes clusters.
  Target target = 5;
  repeated string targetPools = 7;
  // Type of the role.
  RoleType roleType = 6;
}

// RoleType specifies the type of the role.
enum RoleType {
  // API server load balancer.
  ApiServer = 0;
  // Ingress load balancer.
  Ingress = 1;
}

// TODO: remove in favor of targetPools
// Target specifies which nodes are targeted by the load balancer.
enum Target {
  // All nodes in cluster.
  k8sAllNodes = 0;
  // Only Control nodes.
  k8sControlPlane = 1;
  // Only Compute nodes
  k8sComputePlane = 2;
}

// ClusterType specifies the type of the cluster.
enum ClusterType {
  // Kubernetes cluster.
  K8s = 0;
  // Load balancer cluster.
  LB = 1;
}

