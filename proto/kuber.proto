syntax = "proto3";
package claudie;
import "proto/config.proto";

option go_package = "proto/pb";

message SetUpStorageRequest {
  K8scluster desiredCluster = 1;
}
message SetUpStorageResponse {
  K8scluster desiredCluster = 1;
}

message StoreKubeconfigRequest {
  K8scluster cluster = 1;
}

message StoreKubeconfigResponse {}

message DeleteKubeconfigRequest {
  K8scluster cluster = 1;
}

message DeleteKubeconfigResponse {}

message DeleteNodesRequest {
  K8scluster cluster = 1;
  repeated string workerNodes = 2;
  repeated string masterNodes = 3;
}

message DeleteNodesResponse {
  K8scluster cluster = 1;
}

message StoreClusterMetadataRequest {
  K8scluster cluster = 1;
}

message StoreClusterMetadataResponse {}

message DeleteClusterMetadataRequest {
  K8scluster cluster = 1;
}

message DeleteClusterMetadataResponse {}

message PatchNodeTemplateRequest {
  K8scluster cluster = 1;
}

message PatchNodeTemplateResponse {}

message SetUpClusterAutoscalerRequest{
  string projectName = 1;
  K8scluster cluster = 2;
}

message SetUpClusterAutoscalerResponse {}

message DestroyClusterAutoscalerRequest{
  string projectName = 1;
  K8scluster cluster = 2;
}

message DestroyClusterAutoscalerResponse {}

service KuberService {
  rpc StoreClusterMetadata(StoreClusterMetadataRequest) returns (StoreClusterMetadataResponse);
  rpc DeleteClusterMetadata(DeleteClusterMetadataRequest) returns (DeleteClusterMetadataResponse);
  rpc SetUpStorage(SetUpStorageRequest) returns (SetUpStorageResponse);
  rpc StoreKubeconfig(StoreKubeconfigRequest) returns (StoreKubeconfigResponse);
  rpc DeleteKubeconfig(DeleteKubeconfigRequest) returns (DeleteKubeconfigResponse);
  rpc DeleteNodes(DeleteNodesRequest) returns (DeleteNodesResponse);
  rpc PatchNodes(PatchNodeTemplateRequest) returns (PatchNodeTemplateResponse);
  rpc SetUpClusterAutoscaler(SetUpClusterAutoscalerRequest) returns (SetUpClusterAutoscalerResponse);
  rpc DestroyClusterAutoscaler(DestroyClusterAutoscalerRequest) returns (DestroyClusterAutoscalerResponse);
}