syntax = "proto3";
package claudie;
import "proto/config.proto";

option go_package = "proto/pb";

message SetUpStorageRequest {
  K8scluster desiredCluster = 1;
}
message SetUpStorageResponse {
  K8scluster desiredCluster = 1;
}

message StoreKubeconfigRequest {
  K8scluster cluster = 1;
}

message StoreKubeconfigResponse {}

message DeleteKubeconfigRequest {
  K8scluster cluster = 1;
}

message DeleteKubeconfigResponse {}

message DeleteNodesRequest {
  K8scluster cluster = 1;
  repeated string workerNodes = 2;
  repeated string masterNodes = 3;
}

message DeleteNodesResponse {
  K8scluster cluster = 1;
}

message StoreClusterMetadataRequest {
  K8scluster cluster = 1;
}

message StoreClusterMetadataResponse {}

message StoreLbScrapeConfigRequest {
  K8scluster cluster = 1;
  repeated LBcluster desiredLoadbalancers = 2;
}

message StoreLbScrapeConfigResponse {}

message RemoveLbScrapeConfigRequest {
  K8scluster cluster = 1;
}

message RemoveLbScrapeConfigResponse {}

message DeleteClusterMetadataRequest {
  K8scluster cluster = 1;
}

message DeleteClusterMetadataResponse {}

service KuberService {
  rpc RemoveLbScrapeConfig(RemoveLbScrapeConfigRequest) returns (RemoveLbScrapeConfigResponse);
  rpc StoreLbScrapeConfig(StoreLbScrapeConfigRequest) returns (StoreLbScrapeConfigResponse);
  rpc StoreClusterMetadata(StoreClusterMetadataRequest) returns (StoreClusterMetadataResponse);
  rpc DeleteClusterMetadata(DeleteClusterMetadataRequest) returns (DeleteClusterMetadataResponse);
  rpc SetUpStorage(SetUpStorageRequest) returns (SetUpStorageResponse);
  rpc StoreKubeconfig(StoreKubeconfigRequest) returns (StoreKubeconfigResponse);
  rpc DeleteKubeconfig(DeleteKubeconfigRequest) returns (DeleteKubeconfigResponse);
  rpc DeleteNodes(DeleteNodesRequest) returns (DeleteNodesResponse);
}