// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.1
// source: spec/manifest.proto

package spec

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RoleType specifies the type of the role.
type RoleType int32

const (
	// API server load balancer.
	RoleType_ApiServer RoleType = 0
	// Ingress load balancer.
	RoleType_Ingress RoleType = 1
)

// Enum value maps for RoleType.
var (
	RoleType_name = map[int32]string{
		0: "ApiServer",
		1: "Ingress",
	}
	RoleType_value = map[string]int32{
		"ApiServer": 0,
		"Ingress":   1,
	}
)

func (x RoleType) Enum() *RoleType {
	p := new(RoleType)
	*p = x
	return p
}

func (x RoleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoleType) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_manifest_proto_enumTypes[0].Descriptor()
}

func (RoleType) Type() protoreflect.EnumType {
	return &file_spec_manifest_proto_enumTypes[0]
}

func (x RoleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoleType.Descriptor instead.
func (RoleType) EnumDescriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{0}
}

// ClusterType specifies the type of the cluster.
type ClusterType int32

const (
	// Kubernetes cluster.
	ClusterType_K8s ClusterType = 0
	// Load balancer cluster.
	ClusterType_LB ClusterType = 1
)

// Enum value maps for ClusterType.
var (
	ClusterType_name = map[int32]string{
		0: "K8s",
		1: "LB",
	}
	ClusterType_value = map[string]int32{
		"K8s": 0,
		"LB":  1,
	}
)

func (x ClusterType) Enum() *ClusterType {
	p := new(ClusterType)
	*p = x
	return p
}

func (x ClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_manifest_proto_enumTypes[1].Descriptor()
}

func (ClusterType) Type() protoreflect.EnumType {
	return &file_spec_manifest_proto_enumTypes[1]
}

func (x ClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterType.Descriptor instead.
func (ClusterType) EnumDescriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{1}
}

type Event int32

const (
	Event_UNKNOWN Event = 0
	Event_CREATE  Event = 1
	Event_UPDATE  Event = 2
	Event_DELETE  Event = 3
)

// Enum value maps for Event.
var (
	Event_name = map[int32]string{
		0: "UNKNOWN",
		1: "CREATE",
		2: "UPDATE",
		3: "DELETE",
	}
	Event_value = map[string]int32{
		"UNKNOWN": 0,
		"CREATE":  1,
		"UPDATE":  2,
		"DELETE":  3,
	}
)

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}

func (x Event) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_manifest_proto_enumTypes[2].Descriptor()
}

func (Event) Type() protoreflect.EnumType {
	return &file_spec_manifest_proto_enumTypes[2]
}

func (x Event) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event.Descriptor instead.
func (Event) EnumDescriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{2}
}

type Manifest_State int32

const (
	Manifest_Pending   Manifest_State = 0
	Manifest_Scheduled Manifest_State = 1
	Manifest_Done      Manifest_State = 2
	Manifest_Error     Manifest_State = 3
)

// Enum value maps for Manifest_State.
var (
	Manifest_State_name = map[int32]string{
		0: "Pending",
		1: "Scheduled",
		2: "Done",
		3: "Error",
	}
	Manifest_State_value = map[string]int32{
		"Pending":   0,
		"Scheduled": 1,
		"Done":      2,
		"Error":     3,
	}
)

func (x Manifest_State) Enum() *Manifest_State {
	p := new(Manifest_State)
	*p = x
	return p
}

func (x Manifest_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Manifest_State) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_manifest_proto_enumTypes[3].Descriptor()
}

func (Manifest_State) Type() protoreflect.EnumType {
	return &file_spec_manifest_proto_enumTypes[3]
}

func (x Manifest_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Manifest_State.Descriptor instead.
func (Manifest_State) EnumDescriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{1, 0}
}

type Workflow_Stage int32

const (
	// NONE indicates that no stage is currently executing.
	Workflow_NONE Workflow_Stage = 0
	// TERRAFORMER indicates that the cluster is currently being build in
	// terraformer.
	Workflow_TERRAFORMER Workflow_Stage = 1
	// ANSIBLER indicates that the cluster is currently being build in ansibler.
	Workflow_ANSIBLER Workflow_Stage = 2
	// KUBE_ELEVEN indicates that the cluster is currently being build in kube
	// eleven.
	Workflow_KUBE_ELEVEN Workflow_Stage = 3
	// KUBER indicates that the cluster is currently being build in kuber.
	Workflow_KUBER Workflow_Stage = 4
	// DESTROY_TERRAFORMER indicates that infra for a cluster is being deleted.
	Workflow_DESTROY_TERRAFORMER Workflow_Stage = 7
	// DESTROY_KUBER indicates that data for a cluster is being deleted.
	Workflow_DESTROY_KUBER Workflow_Stage = 8
	// DELETE_NODES indicates the nodes are being deleted for the cluster.
	Workflow_DELETE_NODES Workflow_Stage = 9
)

// Enum value maps for Workflow_Stage.
var (
	Workflow_Stage_name = map[int32]string{
		0: "NONE",
		1: "TERRAFORMER",
		2: "ANSIBLER",
		3: "KUBE_ELEVEN",
		4: "KUBER",
		7: "DESTROY_TERRAFORMER",
		8: "DESTROY_KUBER",
		9: "DELETE_NODES",
	}
	Workflow_Stage_value = map[string]int32{
		"NONE":                0,
		"TERRAFORMER":         1,
		"ANSIBLER":            2,
		"KUBE_ELEVEN":         3,
		"KUBER":               4,
		"DESTROY_TERRAFORMER": 7,
		"DESTROY_KUBER":       8,
		"DELETE_NODES":        9,
	}
)

func (x Workflow_Stage) Enum() *Workflow_Stage {
	p := new(Workflow_Stage)
	*p = x
	return p
}

func (x Workflow_Stage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Workflow_Stage) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_manifest_proto_enumTypes[4].Descriptor()
}

func (Workflow_Stage) Type() protoreflect.EnumType {
	return &file_spec_manifest_proto_enumTypes[4]
}

func (x Workflow_Stage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Workflow_Stage.Descriptor instead.
func (Workflow_Stage) EnumDescriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{6, 0}
}

type Workflow_Status int32

const (
	// DONE indicates that the workflow has finished.
	Workflow_DONE Workflow_Status = 0
	// ERROR indicates that an error occurred while building the cluster.
	Workflow_ERROR Workflow_Status = 1
	// IN_PROGRESS indicates that the cluster is currently being build.
	Workflow_IN_PROGRESS Workflow_Status = 2
)

// Enum value maps for Workflow_Status.
var (
	Workflow_Status_name = map[int32]string{
		0: "DONE",
		1: "ERROR",
		2: "IN_PROGRESS",
	}
	Workflow_Status_value = map[string]int32{
		"DONE":        0,
		"ERROR":       1,
		"IN_PROGRESS": 2,
	}
)

func (x Workflow_Status) Enum() *Workflow_Status {
	p := new(Workflow_Status)
	*p = x
	return p
}

func (x Workflow_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Workflow_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_manifest_proto_enumTypes[5].Descriptor()
}

func (Workflow_Status) Type() protoreflect.EnumType {
	return &file_spec_manifest_proto_enumTypes[5]
}

func (x Workflow_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Workflow_Status.Descriptor instead.
func (Workflow_Status) EnumDescriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{6, 1}
}

type Retry_Repeat_Kind int32

const (
	Retry_Repeat_ENDLESS     Retry_Repeat_Kind = 0
	Retry_Repeat_EXPONENTIAL Retry_Repeat_Kind = 1
)

// Enum value maps for Retry_Repeat_Kind.
var (
	Retry_Repeat_Kind_name = map[int32]string{
		0: "ENDLESS",
		1: "EXPONENTIAL",
	}
	Retry_Repeat_Kind_value = map[string]int32{
		"ENDLESS":     0,
		"EXPONENTIAL": 1,
	}
)

func (x Retry_Repeat_Kind) Enum() *Retry_Repeat_Kind {
	p := new(Retry_Repeat_Kind)
	*p = x
	return p
}

func (x Retry_Repeat_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Retry_Repeat_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_manifest_proto_enumTypes[6].Descriptor()
}

func (Retry_Repeat_Kind) Type() protoreflect.EnumType {
	return &file_spec_manifest_proto_enumTypes[6]
}

func (x Retry_Repeat_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Retry_Repeat_Kind.Descriptor instead.
func (Retry_Repeat_Kind) EnumDescriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{15, 0, 0}
}

// Config holds data for a single manifest.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version of the config.
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Config name - same as input manifest name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Information related within a k8s context.
	K8SCtx *KubernetesContext `protobuf:"bytes,3,opt,name=k8sCtx,proto3" json:"k8sCtx,omitempty"`
	// Client defined manifest.
	Manifest *Manifest `protobuf:"bytes,4,opt,name=manifest,proto3" json:"manifest,omitempty"`
	// Clusters parsed from the supplied manifest.
	Clusters map[string]*ClusterState `protobuf:"bytes,5,rep,name=clusters,proto3" json:"clusters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_spec_manifest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Config) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Config) GetK8SCtx() *KubernetesContext {
	if x != nil {
		return x.K8SCtx
	}
	return nil
}

func (x *Config) GetManifest() *Manifest {
	if x != nil {
		return x.Manifest
	}
	return nil
}

func (x *Config) GetClusters() map[string]*ClusterState {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type Manifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw                 string         `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Checksum            []byte         `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	LastAppliedChecksum []byte         `protobuf:"bytes,3,opt,name=lastAppliedChecksum,proto3" json:"lastAppliedChecksum,omitempty"`
	State               Manifest_State `protobuf:"varint,4,opt,name=state,proto3,enum=spec.Manifest_State" json:"state,omitempty"`
}

func (x *Manifest) Reset() {
	*x = Manifest{}
	mi := &file_spec_manifest_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Manifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Manifest) ProtoMessage() {}

func (x *Manifest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Manifest.ProtoReflect.Descriptor instead.
func (*Manifest) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{1}
}

func (x *Manifest) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Manifest) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *Manifest) GetLastAppliedChecksum() []byte {
	if x != nil {
		return x.LastAppliedChecksum
	}
	return nil
}

func (x *Manifest) GetState() Manifest_State {
	if x != nil {
		return x.State
	}
	return Manifest_Pending
}

type ClusterState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current *Clusters `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Desired *Clusters `protobuf:"bytes,2,opt,name=desired,proto3" json:"desired,omitempty"`
	Events  *Events   `protobuf:"bytes,3,opt,name=events,proto3" json:"events,omitempty"`
	State   *Workflow `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ClusterState) Reset() {
	*x = ClusterState{}
	mi := &file_spec_manifest_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterState) ProtoMessage() {}

func (x *ClusterState) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterState.ProtoReflect.Descriptor instead.
func (*ClusterState) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterState) GetCurrent() *Clusters {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *ClusterState) GetDesired() *Clusters {
	if x != nil {
		return x.Desired
	}
	return nil
}

func (x *ClusterState) GetEvents() *Events {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ClusterState) GetState() *Workflow {
	if x != nil {
		return x.State
	}
	return nil
}

type Clusters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K8S           *K8Scluster    `protobuf:"bytes,1,opt,name=k8s,proto3" json:"k8s,omitempty"`
	LoadBalancers *LoadBalancers `protobuf:"bytes,2,opt,name=loadBalancers,proto3" json:"loadBalancers,omitempty"`
}

func (x *Clusters) Reset() {
	*x = Clusters{}
	mi := &file_spec_manifest_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Clusters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clusters) ProtoMessage() {}

func (x *Clusters) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clusters.ProtoReflect.Descriptor instead.
func (*Clusters) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{3}
}

func (x *Clusters) GetK8S() *K8Scluster {
	if x != nil {
		return x.K8S
	}
	return nil
}

func (x *Clusters) GetLoadBalancers() *LoadBalancers {
	if x != nil {
		return x.LoadBalancers
	}
	return nil
}

type LoadBalancers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*LBcluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *LoadBalancers) Reset() {
	*x = LoadBalancers{}
	mi := &file_spec_manifest_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadBalancers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancers) ProtoMessage() {}

func (x *LoadBalancers) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancers.ProtoReflect.Descriptor instead.
func (*LoadBalancers) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{4}
}

func (x *LoadBalancers) GetClusters() []*LBcluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type KubernetesContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name represents the input manifest resource name in Kubernetes
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// namespace represents the input manifest resource namespace in Kubernetes
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *KubernetesContext) Reset() {
	*x = KubernetesContext{}
	mi := &file_spec_manifest_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesContext) ProtoMessage() {}

func (x *KubernetesContext) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesContext.ProtoReflect.Descriptor instead.
func (*KubernetesContext) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{5}
}

func (x *KubernetesContext) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesContext) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type Workflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage  Workflow_Stage  `protobuf:"varint,1,opt,name=stage,proto3,enum=spec.Workflow_Stage" json:"stage,omitempty"`
	Status Workflow_Status `protobuf:"varint,2,opt,name=status,proto3,enum=spec.Workflow_Status" json:"status,omitempty"`
	// additional information describing the state and status.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	mi := &file_spec_manifest_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{6}
}

func (x *Workflow) GetStage() Workflow_Stage {
	if x != nil {
		return x.Stage
	}
	return Workflow_NONE
}

func (x *Workflow) GetStatus() Workflow_Status {
	if x != nil {
		return x.Status
	}
	return Workflow_DONE
}

func (x *Workflow) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// K8scluster represents a single kubernetes cluster specified in the manifest.
type K8Scluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// General info about the cluster.
	ClusterInfo *ClusterInfo `protobuf:"bytes,1,opt,name=clusterInfo,proto3" json:"clusterInfo,omitempty"`
	// Network range for the VPN.
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	// Kubeconfig of the cluster.
	Kubeconfig string `protobuf:"bytes,3,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
	// Kubernetes version.
	Kubernetes string `protobuf:"bytes,4,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
	// General information about a proxy used to build a K8s cluster.
	InstallationProxy *InstallationProxy `protobuf:"bytes,5,opt,name=installationProxy,proto3" json:"installationProxy,omitempty"`
}

func (x *K8Scluster) Reset() {
	*x = K8Scluster{}
	mi := &file_spec_manifest_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *K8Scluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8Scluster) ProtoMessage() {}

func (x *K8Scluster) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8Scluster.ProtoReflect.Descriptor instead.
func (*K8Scluster) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{7}
}

func (x *K8Scluster) GetClusterInfo() *ClusterInfo {
	if x != nil {
		return x.ClusterInfo
	}
	return nil
}

func (x *K8Scluster) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *K8Scluster) GetKubeconfig() string {
	if x != nil {
		return x.Kubeconfig
	}
	return ""
}

func (x *K8Scluster) GetKubernetes() string {
	if x != nil {
		return x.Kubernetes
	}
	return ""
}

func (x *K8Scluster) GetInstallationProxy() *InstallationProxy {
	if x != nil {
		return x.InstallationProxy
	}
	return nil
}

// LBcluster represents a single load balancer cluster specified in the
// manifest.
type LBcluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// General info about the cluster.
	ClusterInfo *ClusterInfo `protobuf:"bytes,1,opt,name=clusterInfo,proto3" json:"clusterInfo,omitempty"`
	// Array of Load balancer roles.
	Roles []*Role `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	// DNS information.
	Dns *DNS `protobuf:"bytes,3,opt,name=dns,proto3" json:"dns,omitempty"`
	// Kubernetes cluster name of the cluster this load balancer is attached to.
	TargetedK8S string `protobuf:"bytes,4,opt,name=targetedK8s,proto3" json:"targetedK8s,omitempty"`
}

func (x *LBcluster) Reset() {
	*x = LBcluster{}
	mi := &file_spec_manifest_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LBcluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LBcluster) ProtoMessage() {}

func (x *LBcluster) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LBcluster.ProtoReflect.Descriptor instead.
func (*LBcluster) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{8}
}

func (x *LBcluster) GetClusterInfo() *ClusterInfo {
	if x != nil {
		return x.ClusterInfo
	}
	return nil
}

func (x *LBcluster) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *LBcluster) GetDns() *DNS {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *LBcluster) GetTargetedK8S() string {
	if x != nil {
		return x.TargetedK8S
	}
	return ""
}

// ClusterInfo holds general information about the clusters.
type ClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the cluster.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Random hash of the cluster.
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// Array of node pools this cluster is made of.
	NodePools []*NodePool `protobuf:"bytes,5,rep,name=nodePools,proto3" json:"nodePools,omitempty"`
}

func (x *ClusterInfo) Reset() {
	*x = ClusterInfo{}
	mi := &file_spec_manifest_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfo) ProtoMessage() {}

func (x *ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfo.ProtoReflect.Descriptor instead.
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{9}
}

func (x *ClusterInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ClusterInfo) GetNodePools() []*NodePool {
	if x != nil {
		return x.NodePools
	}
	return nil
}

// InstallationProxy holds general information about a proxy used to build a K8s cluster.
type InstallationProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proxy installation mode.
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// Proxy endpoint used to access the proxy.
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *InstallationProxy) Reset() {
	*x = InstallationProxy{}
	mi := &file_spec_manifest_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstallationProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallationProxy) ProtoMessage() {}

func (x *InstallationProxy) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallationProxy.ProtoReflect.Descriptor instead.
func (*InstallationProxy) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{10}
}

func (x *InstallationProxy) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *InstallationProxy) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

// ProxyEnvs holds information about a need to update proxy envs, proxy endpoint, and no proxy list.
type ProxyEnvs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signal a need to update proxy envs
	UpdateProxyEnvsFlag bool `protobuf:"varint,1,opt,name=updateProxyEnvsFlag,proto3" json:"updateProxyEnvsFlag,omitempty"`
	// Holds a proxy endpoint.
	HttpProxyUrl string `protobuf:"bytes,2,opt,name=httpProxyUrl,proto3" json:"httpProxyUrl,omitempty"`
	// Holds a list of IPs and hostnames that aren't routed through proxy.
	NoProxyList string `protobuf:"bytes,3,opt,name=noProxyList,proto3" json:"noProxyList,omitempty"`
}

func (x *ProxyEnvs) Reset() {
	*x = ProxyEnvs{}
	mi := &file_spec_manifest_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyEnvs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyEnvs) ProtoMessage() {}

func (x *ProxyEnvs) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyEnvs.ProtoReflect.Descriptor instead.
func (*ProxyEnvs) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{11}
}

func (x *ProxyEnvs) GetUpdateProxyEnvsFlag() bool {
	if x != nil {
		return x.UpdateProxyEnvsFlag
	}
	return false
}

func (x *ProxyEnvs) GetHttpProxyUrl() string {
	if x != nil {
		return x.HttpProxyUrl
	}
	return ""
}

func (x *ProxyEnvs) GetNoProxyList() string {
	if x != nil {
		return x.NoProxyList
	}
	return ""
}

// Role represents a single loadbalancer role from the manifest.
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the role.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Protocol that load balancer uses to forward traffic. ["tcp", "udp"]
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Port that load balancer will forward from.
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Port that load balancer will forward to.
	TargetPort int32 `protobuf:"varint,4,opt,name=targetPort,proto3" json:"targetPort,omitempty"`
	// Targeted nodes in Kubernetes clusters.
	TargetPools []string `protobuf:"bytes,7,rep,name=targetPools,proto3" json:"targetPools,omitempty"`
	// Type of the role.
	RoleType RoleType `protobuf:"varint,6,opt,name=roleType,proto3,enum=spec.RoleType" json:"roleType,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	mi := &file_spec_manifest_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{12}
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Role) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Role) GetTargetPort() int32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

func (x *Role) GetTargetPools() []string {
	if x != nil {
		return x.TargetPools
	}
	return nil
}

func (x *Role) GetRoleType() RoleType {
	if x != nil {
		return x.RoleType
	}
	return RoleType_ApiServer
}

type Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events     []*TaskEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	Ttl        int32        `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Autoscaled bool         `protobuf:"varint,3,opt,name=autoscaled,proto3" json:"autoscaled,omitempty"`
}

func (x *Events) Reset() {
	*x = Events{}
	mi := &file_spec_manifest_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Events) ProtoMessage() {}

func (x *Events) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Events.ProtoReflect.Descriptor instead.
func (*Events) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{13}
}

func (x *Events) GetEvents() []*TaskEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Events) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *Events) GetAutoscaled() bool {
	if x != nil {
		return x.Autoscaled
	}
	return false
}

type TaskEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Event       Event                  `protobuf:"varint,3,opt,name=event,proto3,enum=spec.Event" json:"event,omitempty"`
	Task        *Task                  `protobuf:"bytes,4,opt,name=task,proto3" json:"task,omitempty"`
	Description string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	OnError     *Retry                 `protobuf:"bytes,6,opt,name=onError,proto3" json:"onError,omitempty"`
}

func (x *TaskEvent) Reset() {
	*x = TaskEvent{}
	mi := &file_spec_manifest_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEvent) ProtoMessage() {}

func (x *TaskEvent) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEvent.ProtoReflect.Descriptor instead.
func (*TaskEvent) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{14}
}

func (x *TaskEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TaskEvent) GetEvent() Event {
	if x != nil {
		return x.Event
	}
	return Event_UNKNOWN
}

func (x *TaskEvent) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskEvent) GetOnError() *Retry {
	if x != nil {
		return x.OnError
	}
	return nil
}

type Retry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Do:
	//
	//	*Retry_Repeat_
	//	*Retry_Rollback_
	Do isRetry_Do `protobuf_oneof:"Do"`
}

func (x *Retry) Reset() {
	*x = Retry{}
	mi := &file_spec_manifest_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Retry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Retry) ProtoMessage() {}

func (x *Retry) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Retry.ProtoReflect.Descriptor instead.
func (*Retry) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{15}
}

func (m *Retry) GetDo() isRetry_Do {
	if m != nil {
		return m.Do
	}
	return nil
}

func (x *Retry) GetRepeat() *Retry_Repeat {
	if x, ok := x.GetDo().(*Retry_Repeat_); ok {
		return x.Repeat
	}
	return nil
}

func (x *Retry) GetRollback() *Retry_Rollback {
	if x, ok := x.GetDo().(*Retry_Rollback_); ok {
		return x.Rollback
	}
	return nil
}

type isRetry_Do interface {
	isRetry_Do()
}

type Retry_Repeat_ struct {
	Repeat *Retry_Repeat `protobuf:"bytes,3,opt,name=repeat,proto3,oneof"`
}

type Retry_Rollback_ struct {
	Rollback *Retry_Rollback `protobuf:"bytes,4,opt,name=rollback,proto3,oneof"`
}

func (*Retry_Repeat_) isRetry_Do() {}

func (*Retry_Rollback_) isRetry_Do() {}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateState *CreateState `protobuf:"bytes,1,opt,name=createState,proto3" json:"createState,omitempty"`
	UpdateState *UpdateState `protobuf:"bytes,2,opt,name=updateState,proto3" json:"updateState,omitempty"`
	DeleteState *DeleteState `protobuf:"bytes,3,opt,name=deleteState,proto3" json:"deleteState,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_spec_manifest_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{16}
}

func (x *Task) GetCreateState() *CreateState {
	if x != nil {
		return x.CreateState
	}
	return nil
}

func (x *Task) GetUpdateState() *UpdateState {
	if x != nil {
		return x.UpdateState
	}
	return nil
}

func (x *Task) GetDeleteState() *DeleteState {
	if x != nil {
		return x.DeleteState
	}
	return nil
}

type CreateState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K8S *K8Scluster    `protobuf:"bytes,1,opt,name=k8s,proto3" json:"k8s,omitempty"`
	Lbs *LoadBalancers `protobuf:"bytes,2,opt,name=lbs,proto3" json:"lbs,omitempty"`
}

func (x *CreateState) Reset() {
	*x = CreateState{}
	mi := &file_spec_manifest_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateState) ProtoMessage() {}

func (x *CreateState) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateState.ProtoReflect.Descriptor instead.
func (*CreateState) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{17}
}

func (x *CreateState) GetK8S() *K8Scluster {
	if x != nil {
		return x.K8S
	}
	return nil
}

func (x *CreateState) GetLbs() *LoadBalancers {
	if x != nil {
		return x.Lbs
	}
	return nil
}

type UpdateState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K8S      *K8Scluster           `protobuf:"bytes,1,opt,name=k8s,proto3" json:"k8s,omitempty"`
	Lbs      *LoadBalancers        `protobuf:"bytes,2,opt,name=lbs,proto3" json:"lbs,omitempty"`
	Endpoint *UpdateState_Endpoint `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *UpdateState) Reset() {
	*x = UpdateState{}
	mi := &file_spec_manifest_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateState) ProtoMessage() {}

func (x *UpdateState) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateState.ProtoReflect.Descriptor instead.
func (*UpdateState) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateState) GetK8S() *K8Scluster {
	if x != nil {
		return x.K8S
	}
	return nil
}

func (x *UpdateState) GetLbs() *LoadBalancers {
	if x != nil {
		return x.Lbs
	}
	return nil
}

func (x *UpdateState) GetEndpoint() *UpdateState_Endpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

type DeleteState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K8S       *K8Scluster              `protobuf:"bytes,1,opt,name=k8s,proto3" json:"k8s,omitempty"`
	Lbs       *LoadBalancers           `protobuf:"bytes,2,opt,name=lbs,proto3" json:"lbs,omitempty"`
	Nodepools map[string]*DeletedNodes `protobuf:"bytes,3,rep,name=nodepools,proto3" json:"nodepools,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeleteState) Reset() {
	*x = DeleteState{}
	mi := &file_spec_manifest_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteState) ProtoMessage() {}

func (x *DeleteState) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteState.ProtoReflect.Descriptor instead.
func (*DeleteState) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteState) GetK8S() *K8Scluster {
	if x != nil {
		return x.K8S
	}
	return nil
}

func (x *DeleteState) GetLbs() *LoadBalancers {
	if x != nil {
		return x.Lbs
	}
	return nil
}

func (x *DeleteState) GetNodepools() map[string]*DeletedNodes {
	if x != nil {
		return x.Nodepools
	}
	return nil
}

type DeletedNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []string `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *DeletedNodes) Reset() {
	*x = DeletedNodes{}
	mi := &file_spec_manifest_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletedNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletedNodes) ProtoMessage() {}

func (x *DeletedNodes) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletedNodes.ProtoReflect.Descriptor instead.
func (*DeletedNodes) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{20}
}

func (x *DeletedNodes) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type Retry_Repeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind Retry_Repeat_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=spec.Retry_Repeat_Kind" json:"kind,omitempty"`
	// currentTick specifies the current number of ticks.
	// A tick is an regular interval at which manifests are being checked.
	// to check the Tick timeout see: manager/internal/service/watchers.go
	CurrentTick uint32 `protobuf:"varint,2,opt,name=currentTick,proto3" json:"currentTick,omitempty"`
	// stopAfter specifies the maximum number of ticks, after reaching this value the manifest will be rescheduled
	// for the last time before giving up.
	StopAfter uint32 `protobuf:"varint,3,opt,name=stopAfter,proto3" json:"stopAfter,omitempty"`
	// retryAfter specifies the number of ticks to wait before rescheduling the manifest again.
	// this value will be set to the value of currentTick after it is updated.
	RetryAfter uint32 `protobuf:"varint,4,opt,name=retryAfter,proto3" json:"retryAfter,omitempty"`
}

func (x *Retry_Repeat) Reset() {
	*x = Retry_Repeat{}
	mi := &file_spec_manifest_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Retry_Repeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Retry_Repeat) ProtoMessage() {}

func (x *Retry_Repeat) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Retry_Repeat.ProtoReflect.Descriptor instead.
func (*Retry_Repeat) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{15, 0}
}

func (x *Retry_Repeat) GetKind() Retry_Repeat_Kind {
	if x != nil {
		return x.Kind
	}
	return Retry_Repeat_ENDLESS
}

func (x *Retry_Repeat) GetCurrentTick() uint32 {
	if x != nil {
		return x.CurrentTick
	}
	return 0
}

func (x *Retry_Repeat) GetStopAfter() uint32 {
	if x != nil {
		return x.StopAfter
	}
	return 0
}

func (x *Retry_Repeat) GetRetryAfter() uint32 {
	if x != nil {
		return x.RetryAfter
	}
	return 0
}

type Retry_Rollback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*TaskEvent `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *Retry_Rollback) Reset() {
	*x = Retry_Rollback{}
	mi := &file_spec_manifest_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Retry_Rollback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Retry_Rollback) ProtoMessage() {}

func (x *Retry_Rollback) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Retry_Rollback.ProtoReflect.Descriptor instead.
func (*Retry_Rollback) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{15, 1}
}

func (x *Retry_Rollback) GetTasks() []*TaskEvent {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type UpdateState_Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodepool string `protobuf:"bytes,1,opt,name=nodepool,proto3" json:"nodepool,omitempty"`
	Node     string `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *UpdateState_Endpoint) Reset() {
	*x = UpdateState_Endpoint{}
	mi := &file_spec_manifest_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateState_Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateState_Endpoint) ProtoMessage() {}

func (x *UpdateState_Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifest_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateState_Endpoint.ProtoReflect.Descriptor instead.
func (*UpdateState_Endpoint) Descriptor() ([]byte, []int) {
	return file_spec_manifest_proto_rawDescGZIP(), []int{18, 0}
}

func (x *UpdateState_Endpoint) GetNodepool() string {
	if x != nil {
		return x.Nodepool
	}
	return ""
}

func (x *UpdateState_Endpoint) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

var File_spec_manifest_proto protoreflect.FileDescriptor

var file_spec_manifest_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x73, 0x70, 0x65, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x70,
	0x65, 0x63, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x64, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9c, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x6b, 0x38,
	0x73, 0x43, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x06, 0x6b, 0x38, 0x73, 0x43, 0x74, 0x78, 0x12, 0x2a, 0x0a, 0x08, 0x6d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x08, 0x6d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x1a,
	0x4f, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xd0, 0x01, 0x0a, 0x08, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x13, 0x6c,
	0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x2a, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x38, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x03, 0x22, 0xae, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x07, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x69, 0x0a, 0x08, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x22, 0x0a, 0x03, 0x6b, 0x38, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x38, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x03, 0x6b, 0x38, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x73,
	0x52, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x22,
	0x3c, 0x0a, 0x0d, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x73,
	0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x42, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x45, 0x0a,
	0x11, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8a,
	0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x52, 0x52, 0x41, 0x46, 0x4f, 0x52, 0x4d, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x56, 0x45, 0x4e,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x10, 0x04, 0x12, 0x17, 0x0a,
	0x13, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x41, 0x46, 0x4f,
	0x52, 0x4d, 0x45, 0x52, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f,
	0x59, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x53, 0x10, 0x09, 0x22, 0x2e, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x22, 0xe2, 0x01, 0x0a, 0x0a,
	0x4b, 0x38, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x75, 0x62,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x11, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x22, 0xa1, 0x01, 0x0a, 0x09, 0x4c, 0x42, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x03, 0x64,
	0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64, 0x4b, 0x38,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65,
	0x64, 0x4b, 0x38, 0x73, 0x22, 0x63, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x43, 0x0a, 0x11, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x83,
	0x01, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x76, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x76, 0x73, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x76, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22,
	0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55,
	0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x63, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x74, 0x74, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x07, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xe0, 0x02, 0x0a, 0x05, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x1a, 0xbb, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12,
	0x2b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0x24, 0x0a, 0x04,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x44, 0x4c, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x58, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c,
	0x10, 0x01, 0x1a, 0x31, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x25,
	0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x04, 0x0a, 0x02, 0x44, 0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x04,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33,
	0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x58, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x6b, 0x38, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x38, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x03, 0x6b, 0x38, 0x73, 0x12, 0x25, 0x0a, 0x03, 0x6c, 0x62, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x52, 0x03, 0x6c, 0x62, 0x73, 0x22, 0xcc, 0x01,
	0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x03, 0x6b, 0x38, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x4b, 0x38, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x03, 0x6b, 0x38,
	0x73, 0x12, 0x25, 0x0a, 0x03, 0x6c, 0x62, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x73, 0x52, 0x03, 0x6c, 0x62, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x1a, 0x3a, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0xea, 0x01, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x03,
	0x6b, 0x38, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x4b, 0x38, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x03, 0x6b, 0x38, 0x73,
	0x12, 0x25, 0x0a, 0x03, 0x6c, 0x62, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x73, 0x52, 0x03, 0x6c, 0x62, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x1a, 0x50, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x24, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2a,
	0x26, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x2a, 0x1e, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x38, 0x73, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x4c, 0x42, 0x10, 0x01, 0x2a, 0x38, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x03, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x62, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x75, 0x64, 0x69, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spec_manifest_proto_rawDescOnce sync.Once
	file_spec_manifest_proto_rawDescData = file_spec_manifest_proto_rawDesc
)

func file_spec_manifest_proto_rawDescGZIP() []byte {
	file_spec_manifest_proto_rawDescOnce.Do(func() {
		file_spec_manifest_proto_rawDescData = protoimpl.X.CompressGZIP(file_spec_manifest_proto_rawDescData)
	})
	return file_spec_manifest_proto_rawDescData
}

var file_spec_manifest_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_spec_manifest_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_spec_manifest_proto_goTypes = []any{
	(RoleType)(0),                 // 0: spec.RoleType
	(ClusterType)(0),              // 1: spec.ClusterType
	(Event)(0),                    // 2: spec.Event
	(Manifest_State)(0),           // 3: spec.Manifest.State
	(Workflow_Stage)(0),           // 4: spec.Workflow.Stage
	(Workflow_Status)(0),          // 5: spec.Workflow.Status
	(Retry_Repeat_Kind)(0),        // 6: spec.Retry.Repeat.Kind
	(*Config)(nil),                // 7: spec.Config
	(*Manifest)(nil),              // 8: spec.Manifest
	(*ClusterState)(nil),          // 9: spec.ClusterState
	(*Clusters)(nil),              // 10: spec.Clusters
	(*LoadBalancers)(nil),         // 11: spec.LoadBalancers
	(*KubernetesContext)(nil),     // 12: spec.KubernetesContext
	(*Workflow)(nil),              // 13: spec.Workflow
	(*K8Scluster)(nil),            // 14: spec.K8scluster
	(*LBcluster)(nil),             // 15: spec.LBcluster
	(*ClusterInfo)(nil),           // 16: spec.ClusterInfo
	(*InstallationProxy)(nil),     // 17: spec.InstallationProxy
	(*ProxyEnvs)(nil),             // 18: spec.ProxyEnvs
	(*Role)(nil),                  // 19: spec.Role
	(*Events)(nil),                // 20: spec.Events
	(*TaskEvent)(nil),             // 21: spec.TaskEvent
	(*Retry)(nil),                 // 22: spec.Retry
	(*Task)(nil),                  // 23: spec.Task
	(*CreateState)(nil),           // 24: spec.CreateState
	(*UpdateState)(nil),           // 25: spec.UpdateState
	(*DeleteState)(nil),           // 26: spec.DeleteState
	(*DeletedNodes)(nil),          // 27: spec.DeletedNodes
	nil,                           // 28: spec.Config.ClustersEntry
	(*Retry_Repeat)(nil),          // 29: spec.Retry.Repeat
	(*Retry_Rollback)(nil),        // 30: spec.Retry.Rollback
	(*UpdateState_Endpoint)(nil),  // 31: spec.UpdateState.Endpoint
	nil,                           // 32: spec.DeleteState.NodepoolsEntry
	(*DNS)(nil),                   // 33: spec.DNS
	(*NodePool)(nil),              // 34: spec.NodePool
	(*timestamppb.Timestamp)(nil), // 35: google.protobuf.Timestamp
}
var file_spec_manifest_proto_depIdxs = []int32{
	12, // 0: spec.Config.k8sCtx:type_name -> spec.KubernetesContext
	8,  // 1: spec.Config.manifest:type_name -> spec.Manifest
	28, // 2: spec.Config.clusters:type_name -> spec.Config.ClustersEntry
	3,  // 3: spec.Manifest.state:type_name -> spec.Manifest.State
	10, // 4: spec.ClusterState.current:type_name -> spec.Clusters
	10, // 5: spec.ClusterState.desired:type_name -> spec.Clusters
	20, // 6: spec.ClusterState.events:type_name -> spec.Events
	13, // 7: spec.ClusterState.state:type_name -> spec.Workflow
	14, // 8: spec.Clusters.k8s:type_name -> spec.K8scluster
	11, // 9: spec.Clusters.loadBalancers:type_name -> spec.LoadBalancers
	15, // 10: spec.LoadBalancers.clusters:type_name -> spec.LBcluster
	4,  // 11: spec.Workflow.stage:type_name -> spec.Workflow.Stage
	5,  // 12: spec.Workflow.status:type_name -> spec.Workflow.Status
	16, // 13: spec.K8scluster.clusterInfo:type_name -> spec.ClusterInfo
	17, // 14: spec.K8scluster.installationProxy:type_name -> spec.InstallationProxy
	16, // 15: spec.LBcluster.clusterInfo:type_name -> spec.ClusterInfo
	19, // 16: spec.LBcluster.roles:type_name -> spec.Role
	33, // 17: spec.LBcluster.dns:type_name -> spec.DNS
	34, // 18: spec.ClusterInfo.nodePools:type_name -> spec.NodePool
	0,  // 19: spec.Role.roleType:type_name -> spec.RoleType
	21, // 20: spec.Events.events:type_name -> spec.TaskEvent
	35, // 21: spec.TaskEvent.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 22: spec.TaskEvent.event:type_name -> spec.Event
	23, // 23: spec.TaskEvent.task:type_name -> spec.Task
	22, // 24: spec.TaskEvent.onError:type_name -> spec.Retry
	29, // 25: spec.Retry.repeat:type_name -> spec.Retry.Repeat
	30, // 26: spec.Retry.rollback:type_name -> spec.Retry.Rollback
	24, // 27: spec.Task.createState:type_name -> spec.CreateState
	25, // 28: spec.Task.updateState:type_name -> spec.UpdateState
	26, // 29: spec.Task.deleteState:type_name -> spec.DeleteState
	14, // 30: spec.CreateState.k8s:type_name -> spec.K8scluster
	11, // 31: spec.CreateState.lbs:type_name -> spec.LoadBalancers
	14, // 32: spec.UpdateState.k8s:type_name -> spec.K8scluster
	11, // 33: spec.UpdateState.lbs:type_name -> spec.LoadBalancers
	31, // 34: spec.UpdateState.endpoint:type_name -> spec.UpdateState.Endpoint
	14, // 35: spec.DeleteState.k8s:type_name -> spec.K8scluster
	11, // 36: spec.DeleteState.lbs:type_name -> spec.LoadBalancers
	32, // 37: spec.DeleteState.nodepools:type_name -> spec.DeleteState.NodepoolsEntry
	9,  // 38: spec.Config.ClustersEntry.value:type_name -> spec.ClusterState
	6,  // 39: spec.Retry.Repeat.kind:type_name -> spec.Retry.Repeat.Kind
	21, // 40: spec.Retry.Rollback.tasks:type_name -> spec.TaskEvent
	27, // 41: spec.DeleteState.NodepoolsEntry.value:type_name -> spec.DeletedNodes
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_spec_manifest_proto_init() }
func file_spec_manifest_proto_init() {
	if File_spec_manifest_proto != nil {
		return
	}
	file_spec_nodepool_proto_init()
	file_spec_dns_proto_init()
	file_spec_manifest_proto_msgTypes[15].OneofWrappers = []any{
		(*Retry_Repeat_)(nil),
		(*Retry_Rollback_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spec_manifest_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spec_manifest_proto_goTypes,
		DependencyIndexes: file_spec_manifest_proto_depIdxs,
		EnumInfos:         file_spec_manifest_proto_enumTypes,
		MessageInfos:      file_spec_manifest_proto_msgTypes,
	}.Build()
	File_spec_manifest_proto = out.File
	file_spec_manifest_proto_rawDesc = nil
	file_spec_manifest_proto_goTypes = nil
	file_spec_manifest_proto_depIdxs = nil
}
