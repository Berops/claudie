// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/ansibler.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnsiblerServiceClient is the client API for AnsiblerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnsiblerServiceClient interface {
	//InstallNodeRequirements installs any requirments there are on all of the nodes
	InstallNodeRequirements(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error)
	//InstallVPN installs VPN between nodes in the k8s cluster and lb clusters
	InstallVPN(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error)
	//SetUpLoadbalancers sets up the loadbalancers, DNS and verifies their configuration
	SetUpLoadbalancers(ctx context.Context, in *SetUpLBRequest, opts ...grpc.CallOption) (*SetUpLBResponse, error)
}

type ansiblerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnsiblerServiceClient(cc grpc.ClientConnInterface) AnsiblerServiceClient {
	return &ansiblerServiceClient{cc}
}

func (c *ansiblerServiceClient) InstallNodeRequirements(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error) {
	out := new(InstallResponse)
	err := c.cc.Invoke(ctx, "/claudie.AnsiblerService/InstallNodeRequirements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansiblerServiceClient) InstallVPN(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error) {
	out := new(InstallResponse)
	err := c.cc.Invoke(ctx, "/claudie.AnsiblerService/InstallVPN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansiblerServiceClient) SetUpLoadbalancers(ctx context.Context, in *SetUpLBRequest, opts ...grpc.CallOption) (*SetUpLBResponse, error) {
	out := new(SetUpLBResponse)
	err := c.cc.Invoke(ctx, "/claudie.AnsiblerService/SetUpLoadbalancers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnsiblerServiceServer is the server API for AnsiblerService service.
// All implementations must embed UnimplementedAnsiblerServiceServer
// for forward compatibility
type AnsiblerServiceServer interface {
	//InstallNodeRequirements installs any requirments there are on all of the nodes
	InstallNodeRequirements(context.Context, *InstallRequest) (*InstallResponse, error)
	//InstallVPN installs VPN between nodes in the k8s cluster and lb clusters
	InstallVPN(context.Context, *InstallRequest) (*InstallResponse, error)
	//SetUpLoadbalancers sets up the loadbalancers, DNS and verifies their configuration
	SetUpLoadbalancers(context.Context, *SetUpLBRequest) (*SetUpLBResponse, error)
	mustEmbedUnimplementedAnsiblerServiceServer()
}

// UnimplementedAnsiblerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnsiblerServiceServer struct {
}

func (UnimplementedAnsiblerServiceServer) InstallNodeRequirements(context.Context, *InstallRequest) (*InstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallNodeRequirements not implemented")
}
func (UnimplementedAnsiblerServiceServer) InstallVPN(context.Context, *InstallRequest) (*InstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallVPN not implemented")
}
func (UnimplementedAnsiblerServiceServer) SetUpLoadbalancers(context.Context, *SetUpLBRequest) (*SetUpLBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUpLoadbalancers not implemented")
}
func (UnimplementedAnsiblerServiceServer) mustEmbedUnimplementedAnsiblerServiceServer() {}

// UnsafeAnsiblerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnsiblerServiceServer will
// result in compilation errors.
type UnsafeAnsiblerServiceServer interface {
	mustEmbedUnimplementedAnsiblerServiceServer()
}

func RegisterAnsiblerServiceServer(s grpc.ServiceRegistrar, srv AnsiblerServiceServer) {
	s.RegisterService(&AnsiblerService_ServiceDesc, srv)
}

func _AnsiblerService_InstallNodeRequirements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsiblerServiceServer).InstallNodeRequirements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/claudie.AnsiblerService/InstallNodeRequirements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsiblerServiceServer).InstallNodeRequirements(ctx, req.(*InstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsiblerService_InstallVPN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsiblerServiceServer).InstallVPN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/claudie.AnsiblerService/InstallVPN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsiblerServiceServer).InstallVPN(ctx, req.(*InstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsiblerService_SetUpLoadbalancers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUpLBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsiblerServiceServer).SetUpLoadbalancers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/claudie.AnsiblerService/SetUpLoadbalancers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsiblerServiceServer).SetUpLoadbalancers(ctx, req.(*SetUpLBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnsiblerService_ServiceDesc is the grpc.ServiceDesc for AnsiblerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnsiblerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "claudie.AnsiblerService",
	HandlerType: (*AnsiblerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallNodeRequirements",
			Handler:    _AnsiblerService_InstallNodeRequirements_Handler,
		},
		{
			MethodName: "InstallVPN",
			Handler:    _AnsiblerService_InstallVPN_Handler,
		},
		{
			MethodName: "SetUpLoadbalancers",
			Handler:    _AnsiblerService_SetUpLoadbalancers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ansibler.proto",
}
