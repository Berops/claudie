// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: proto/frontend.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrontendServiceClient is the client API for FrontendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontendServiceClient interface {
	// SendAutoscalerEvent sends events to frontend when a scale up/down encures
	SendAutoscalerEvent(ctx context.Context, in *SendAutoscalerEventRequest, opts ...grpc.CallOption) (*SendAutoscalerEventResponse, error)
}

type frontendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendServiceClient(cc grpc.ClientConnInterface) FrontendServiceClient {
	return &frontendServiceClient{cc}
}

func (c *frontendServiceClient) SendAutoscalerEvent(ctx context.Context, in *SendAutoscalerEventRequest, opts ...grpc.CallOption) (*SendAutoscalerEventResponse, error) {
	out := new(SendAutoscalerEventResponse)
	err := c.cc.Invoke(ctx, "/claudie.FrontendService/SendAutoscalerEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendServiceServer is the server API for FrontendService service.
// All implementations must embed UnimplementedFrontendServiceServer
// for forward compatibility
type FrontendServiceServer interface {
	// SendAutoscalerEvent sends events to frontend when a scale up/down encures
	SendAutoscalerEvent(context.Context, *SendAutoscalerEventRequest) (*SendAutoscalerEventResponse, error)
	mustEmbedUnimplementedFrontendServiceServer()
}

// UnimplementedFrontendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFrontendServiceServer struct {
}

func (UnimplementedFrontendServiceServer) SendAutoscalerEvent(context.Context, *SendAutoscalerEventRequest) (*SendAutoscalerEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAutoscalerEvent not implemented")
}
func (UnimplementedFrontendServiceServer) mustEmbedUnimplementedFrontendServiceServer() {}

// UnsafeFrontendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontendServiceServer will
// result in compilation errors.
type UnsafeFrontendServiceServer interface {
	mustEmbedUnimplementedFrontendServiceServer()
}

func RegisterFrontendServiceServer(s grpc.ServiceRegistrar, srv FrontendServiceServer) {
	s.RegisterService(&FrontendService_ServiceDesc, srv)
}

func _FrontendService_SendAutoscalerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAutoscalerEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).SendAutoscalerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/claudie.FrontendService/SendAutoscalerEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).SendAutoscalerEvent(ctx, req.(*SendAutoscalerEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FrontendService_ServiceDesc is the grpc.ServiceDesc for FrontendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "claudie.FrontendService",
	HandlerType: (*FrontendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAutoscalerEvent",
			Handler:    _FrontendService_SendAutoscalerEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/frontend.proto",
}
