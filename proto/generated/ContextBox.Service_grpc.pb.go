// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: ContextBox.Service.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContextBoxClient is the client API for ContextBox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContextBoxClient interface {
	GetConfigList(ctx context.Context, in *GetConfigListRequest, opts ...grpc.CallOption) (*GetConfigListResponse, error)
	SaveConfig(ctx context.Context, in *SaveConfigRequest, opts ...grpc.CallOption) (*SaveConfigResponse, error)
	DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*DeleteConfigResponse, error)
}

type contextBoxClient struct {
	cc grpc.ClientConnInterface
}

func NewContextBoxClient(cc grpc.ClientConnInterface) ContextBoxClient {
	return &contextBoxClient{cc}
}

func (c *contextBoxClient) GetConfigList(ctx context.Context, in *GetConfigListRequest, opts ...grpc.CallOption) (*GetConfigListResponse, error) {
	out := new(GetConfigListResponse)
	err := c.cc.Invoke(ctx, "/claudie.ContextBox/GetConfigList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextBoxClient) SaveConfig(ctx context.Context, in *SaveConfigRequest, opts ...grpc.CallOption) (*SaveConfigResponse, error) {
	out := new(SaveConfigResponse)
	err := c.cc.Invoke(ctx, "/claudie.ContextBox/SaveConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextBoxClient) DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*DeleteConfigResponse, error) {
	out := new(DeleteConfigResponse)
	err := c.cc.Invoke(ctx, "/claudie.ContextBox/DeleteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContextBoxServer is the server API for ContextBox service.
// All implementations must embed UnimplementedContextBoxServer
// for forward compatibility
type ContextBoxServer interface {
	GetConfigList(context.Context, *GetConfigListRequest) (*GetConfigListResponse, error)
	SaveConfig(context.Context, *SaveConfigRequest) (*SaveConfigResponse, error)
	DeleteConfig(context.Context, *DeleteConfigRequest) (*DeleteConfigResponse, error)
	mustEmbedUnimplementedContextBoxServer()
}

// UnimplementedContextBoxServer must be embedded to have forward compatible implementations.
type UnimplementedContextBoxServer struct {
}

func (UnimplementedContextBoxServer) GetConfigList(context.Context, *GetConfigListRequest) (*GetConfigListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigList not implemented")
}
func (UnimplementedContextBoxServer) SaveConfig(context.Context, *SaveConfigRequest) (*SaveConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveConfig not implemented")
}
func (UnimplementedContextBoxServer) DeleteConfig(context.Context, *DeleteConfigRequest) (*DeleteConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (UnimplementedContextBoxServer) mustEmbedUnimplementedContextBoxServer() {}

// UnsafeContextBoxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContextBoxServer will
// result in compilation errors.
type UnsafeContextBoxServer interface {
	mustEmbedUnimplementedContextBoxServer()
}

func RegisterContextBoxServer(s grpc.ServiceRegistrar, srv ContextBoxServer) {
	s.RegisterService(&ContextBox_ServiceDesc, srv)
}

func _ContextBox_GetConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextBoxServer).GetConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/claudie.ContextBox/GetConfigList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextBoxServer).GetConfigList(ctx, req.(*GetConfigListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextBox_SaveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextBoxServer).SaveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/claudie.ContextBox/SaveConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextBoxServer).SaveConfig(ctx, req.(*SaveConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextBox_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextBoxServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/claudie.ContextBox/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextBoxServer).DeleteConfig(ctx, req.(*DeleteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContextBox_ServiceDesc is the grpc.ServiceDesc for ContextBox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContextBox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "claudie.ContextBox",
	HandlerType: (*ContextBoxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfigList",
			Handler:    _ContextBox_GetConfigList_Handler,
		},
		{
			MethodName: "SaveConfig",
			Handler:    _ContextBox_SaveConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _ContextBox_DeleteConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ContextBox.Service.proto",
}
